{"version":3,"sources":["component/Statistics/Statistics.js","component/Notification/Notification.js","component/Section/Section.js","component/Feedback/Feedback.js","component/Container/Container.js","App.js","index.js","component/Section/Section.module.css","component/Feedback/Feedback.module.css","component/Container/Container.module.css"],"names":["Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","Notification","message","Section","title","children","className","s","section","FeedbackOptions","options","onLeaveFeedback","map","option","type","btn","onClick","Container","container","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Feedback","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6QAGMA,E,4JACJ,WACE,MAA0DC,KAAKC,MAAvDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBAEnC,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,e,GAViBC,aAuBVR,ICnBAS,EALM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,K,gBCe3BC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASC,UAAWC,IAAEC,QAAtB,UACE,6BAAKJ,IACJC,M,gBCyBQI,MA5Bf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAGlC,OACE,mCACE,8BACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBAEEC,KAAK,SACLR,UAAWC,IAAEQ,IACbC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GALIA,W,gBCPJI,MAJf,YAAkC,IAAbZ,EAAY,EAAZA,SACnB,OAAO,qBAAKC,UAAWC,IAAEW,UAAlB,SAA8Bb,KC2DxBc,MAvDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOzB,EAAP,KAAa0B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOxB,EAAP,KAAgB0B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOvB,EAAP,KAAY0B,EAAZ,KAqBMC,EAAqB,WACzB,OAAO7B,EAAOC,EAAUC,GAO1B,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASO,MAAM,wBAAf,SACE,cAACqB,EAAD,CAAUf,QA9BA,CAAC,OAAQ,UAAW,OA8BFC,gBA5Bd,SAACE,GACnB,OAAQA,GACN,IAAK,OACHQ,GAAQ,SAACK,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHJ,GAAW,SAACI,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHH,GAAO,SAACG,GAAD,OAAeA,EAAY,WAsBpC,cAAC,EAAD,CAAStB,MAAM,aAAf,SACGoB,EACC,cAAC,EAAD,CACE7B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,IACPzB,mBAhBD4B,KAAKC,MAAOjC,EAAO6B,IAAwB,OAmB5C,cAAC,EAAD,CAActB,QAAQ,4BClDhC2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,QAAU,2B,kBCA5BD,EAAOC,QAAU,CAAC,IAAM,wB,kBCAxBD,EAAOC,QAAU,CAAC,UAAY,gC","file":"static/js/main.a822e9cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total: {total}</p>\r\n        <p>Positive feedback: {positivePercentage} %</p>\r\n      </>\r\n    );\r\n  }\r\n}\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Section.module.css\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.object,\r\n};\r\n\r\nexport default Section;\r\n","// import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Feedback.module.css\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  // const { options, onLeaveFeedback } = this.props;\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {options.map((option) => {\r\n          return (\r\n            <button\r\n              key={option}\r\n              type=\"button\"\r\n              className={s.btn}\r\n              onClick={() => onLeaveFeedback(option)}\r\n            >\r\n              {option}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import s from \"./Container.module.css\";\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import { useState } from \"react\";\nimport Statistics from \"./component/Statistics/Statistics\";\nimport Notification from \"./component/Notification/Notification\";\nimport Section from \"./component/Section/Section\";\nimport Feedback from \"./component/Feedback/Feedback\";\nimport Container from \"./component/Container/Container\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = [\"good\", \"neutral\", \"bad\"];\n\n  const handleClick = (option) => {\n    switch (option) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <Container>\n      <Section title=\"Please leave feedback\">\n        <Feedback options={options} onLeaveFeedback={handleClick} />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n\n//////////////////////////////////before hooks//////////////////////////\n// import React from \"react\";\n// import Statistics from \"./component/Statistics/Statistics\";\n// import Notification from \"./component/Notification/Notification\";\n// import Section from \"./component/Section/Section\";\n// import Feedback from \"./component/Feedback/Feedback\";\n// import Container from \"./component/Container/Container\";\n\n// class App extends React.Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   // handleGoodIncrement = () => {\n//   //   this.setState((prevState) => ({\n//   //     good: prevState.good + 1,\n//   //   }));\n//   // };\n//   // handleNeutralIncrement = () => {\n//   //   this.setState((prevState) => ({\n//   //     neutral: prevState.neutral + 1,\n//   //   }));\n//   // };\n//   // handleBadIncrement = () => {\n//   //   this.setState((prevState) => ({\n//   //     bad: prevState.bad + 1,\n//   //   }));\n//   // };\n\n//   onLeaveFeedback = (option) => {\n//     this.setState((prevState) => ({\n//       [option]: prevState[option] + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = () =>\n//     this.state.good + this.state.neutral + this.state.bad;\n\n//   countPositiveFeedbackPercentage = () =>\n//     Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n//   render() {\n//     const total = this.countTotalFeedback();\n//     const positivePer = this.countPositiveFeedbackPercentage();\n//     const { good, neutral, bad } = this.state;\n//     const keys = Object.keys(this.state);\n\n//     return (\n//       <Container>\n//         <Section title=\"Please leave feedback\">\n//           <Feedback options={keys} onLeaveFeedback={this.onLeaveFeedback} />\n//         </Section>\n\n//         <Section title=\"Statistics\">\n//           {total ? (\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePer}\n//             />\n//           ) : (\n//             <Notification message=\"No feedback given\" />\n//           )}\n//         </Section>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1PAiQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Feedback_btn__3YEnI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2vuh4\"};"],"sourceRoot":""}